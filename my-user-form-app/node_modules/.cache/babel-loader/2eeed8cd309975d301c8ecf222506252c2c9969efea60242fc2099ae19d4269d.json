{"ast":null,"code":"var _jsxFileName = \"/Users/HSamoenEban/Downloads/my-user-form-app/src/components/Users/AddUser.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Card from '../UI/Card';\nimport Button from '../UI/Button';\nimport classes from './AddUser.module.css';\nimport ErrorModal from '../UI/ErrorModal';\n//for nonjavascript files add extention -->.css\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddUser = props => {\n  _s();\n  const [enteredUsername, setEnteredUsername] = useState('');\n  //inital state is set to an empty string--> no input\n  //[enteredUsername, setEnteredUsername] : a javascript syntax called array de-structuring and is used because useState() always returns an array with exactly two elements\n  const [enteredAge, setEnteredAge] = useState('');\n  const [error, setError] = useState();\n  //set error state\n\n  const AddUserHandler = event => {\n    event.preventDefault();\n    if (enteredUsername.trim().length === 0 || enteredAge.trim().length === 0) {\n      setError({\n        title: 'Invalid input',\n        message: 'Please enter a valid name and age (non-empty values).'\n      });\n      return;\n    }\n    if (+enteredAge < 1) {\n      setError({\n        title: 'Invalid age',\n        message: 'Please enter a valid age (> 0).'\n      });\n      return;\n    }\n    //adding validation:\n    //nothing is logged if one input is empty and age cannot be less than 1 \n    //+ --> returns a number instead of a string\n\n    props.onAddUser(enteredUsername, enteredAge);\n    // console.log(enteredUsername, enteredAge)\n    setEnteredUsername('');\n    setEnteredAge('');\n  };\n  //event.preventDefault() --> prevent default which for the submission event is that a request is sent\n  //setEnteredUsername/setEnteredAge to empty strings --->clear input area once button is clicked\n\n  const usernameChangeHandler = event => {\n    setEnteredUsername(event.target.value);\n  };\n  //set to what the user currently entered--> with help of event object; target event is the input and value property of that input to get the currently entered value\n\n  const ageChangeHandler = event => {\n    setEnteredAge(event.target.value);\n  };\n  const errorHandler = () => {\n    setError(null);\n  };\n  //to get rid of the errormodal:\n  //reset error to undefined or to null or any false value so that the error state condition to the error model is not longer met\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(ErrorModal, {\n      title: error.title,\n      message: error.message,\n      onConfirm: errorHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      className: classes.input,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: AddUserHandler,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"username\",\n          children: \"Username\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"username\",\n          type: \"text\",\n          value: enteredUsername,\n          onChange: usernameChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"age\",\n          children: \"Age (Years)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"age\",\n          type: \"number\",\n          value: enteredAge,\n          onChange: ageChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          children: \"Add User\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n//add in id for accessibility\n//htmlFor is the prop name for assigning the 'for' attribute to a label\n//onSubmit prop to specify a function that should be executed when the form is submitted\n//bind usernameChangeHandler to onChange prop which ties the change event listener; function will be triggered for every keystroke in the input element\n//error && : conditionally render the error modal \n_s(AddUser, \"yAxJk8VniO08Ovg++R9VVYiwj/w=\");\n_c = AddUser;\nexport default AddUser;\nvar _c;\n$RefreshReg$(_c, \"AddUser\");","map":{"version":3,"names":["React","useState","Card","Button","classes","ErrorModal","jsxDEV","_jsxDEV","AddUser","props","_s","enteredUsername","setEnteredUsername","enteredAge","setEnteredAge","error","setError","AddUserHandler","event","preventDefault","trim","length","title","message","onAddUser","usernameChangeHandler","target","value","ageChangeHandler","errorHandler","children","onConfirm","fileName","_jsxFileName","lineNumber","columnNumber","className","input","onSubmit","htmlFor","id","type","onChange","_c","$RefreshReg$"],"sources":["/Users/HSamoenEban/Downloads/my-user-form-app/src/components/Users/AddUser.js"],"sourcesContent":["import React, { useState } from 'react';\n\nimport Card from '../UI/Card';\nimport Button from '../UI/Button';\nimport classes from './AddUser.module.css'\nimport ErrorModal from '../UI/ErrorModal';\n//for nonjavascript files add extention -->.css\n\n\nconst AddUser = (props) => {\n    const [enteredUsername, setEnteredUsername] = useState('')\n    //inital state is set to an empty string--> no input\n    //[enteredUsername, setEnteredUsername] : a javascript syntax called array de-structuring and is used because useState() always returns an array with exactly two elements\n    const [enteredAge, setEnteredAge] = useState('')\n    const [error, setError] = useState();\n    //set error state\n\n    const AddUserHandler = (event) => {\n        event.preventDefault();\n        if (enteredUsername.trim().length === 0 || enteredAge.trim().length === 0) {\n            setError({\n                title: 'Invalid input',\n                message: 'Please enter a valid name and age (non-empty values).'\n            });\n            return;\n        }\n        if (+enteredAge < 1) {\n            setError({\n                title: 'Invalid age',\n                message: 'Please enter a valid age (> 0).'\n            });\n            return; \n        }\n        //adding validation:\n        //nothing is logged if one input is empty and age cannot be less than 1 \n        //+ --> returns a number instead of a string\n        \n        props.onAddUser(enteredUsername, enteredAge);\n        // console.log(enteredUsername, enteredAge)\n        setEnteredUsername('');\n        setEnteredAge('');\n    };\n//event.preventDefault() --> prevent default which for the submission event is that a request is sent\n//setEnteredUsername/setEnteredAge to empty strings --->clear input area once button is clicked\n\n        const usernameChangeHandler = (event) => {\n            setEnteredUsername(event.target.value)\n        };\n        //set to what the user currently entered--> with help of event object; target event is the input and value property of that input to get the currently entered value\n\n        const ageChangeHandler = (event) => {\n            setEnteredAge(event.target.value)\n        };\n\n    const errorHandler = () => {\n        setError(null);\n    }\n    //to get rid of the errormodal:\n    //reset error to undefined or to null or any false value so that the error state condition to the error model is not longer met\n\n    return (\n        <div>\n        {error && (\n        <ErrorModal \n        title={error.title} \n        message={error.message} \n        onConfirm={errorHandler} \n        />\n        )}\n        <Card className={classes.input}>\n            <form onSubmit={AddUserHandler}>\n            <label htmlFor=\"username\">Username</label>\n            <input id=\"username\" type=\"text\" value={enteredUsername} onChange={usernameChangeHandler}></input>\n            <label htmlFor=\"age\">Age (Years)</label>\n            <input id=\"age\" type=\"number\" value={enteredAge} onChange={ageChangeHandler}></input>\n            <Button type=\"submit\">Add User</Button>\n        </form>\n        </Card>\n        </div>\n    )\n}\n//add in id for accessibility\n//htmlFor is the prop name for assigning the 'for' attribute to a label\n//onSubmit prop to specify a function that should be executed when the form is submitted\n//bind usernameChangeHandler to onChange prop which ties the change event listener; function will be triggered for every keystroke in the input element\n//error && : conditionally render the error modal \n\nexport default AddUser;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
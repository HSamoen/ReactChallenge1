{"ast":null,"code":"var _jsxFileName = \"/Users/HSamoenEban/Downloads/my-user-form-app/src/components/Users/AddUser.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Card from '../UI/Card';\nimport Button from '../UI/Button';\nimport classes from './AddUser.module.css';\n//for nonjavascript files add extention -->.css\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddUser = props => {\n  _s();\n  const [enteredUsername, setEnteredUsername] = useState('');\n  //inital state is set to an empty string--> no input\n  //[enteredUsername, setEnteredUsername] : a javascript syntax called array de-structuring and is used because useState() always returns an array with exactly two elements\n  const [enteredAge, setEnteredAge] = useState('');\n  const AddUserHandler = event => {\n    event.preventDefault();\n    if (enteredUsername.trim().length === 0 || enteredAge.trim().length === 0) {\n      return;\n    }\n    if (+enteredAge < 1) {\n      return;\n    }\n    //adding validation:\n    //nothing is logged if one input is empty and age cannot be less than 1 \n    //+ --> returns a number instead of a string\n    console.log(enteredUsername, enteredAge);\n    setEnteredUsername('');\n    setEnteredAge('');\n  };\n  //event.preventDefault() --> prevent default which for the submission event is that a request is sent\n  //setEnteredUsername/setEnteredAge to empty strings --->clear input area once button is clicked\n\n  const usernameChangeHandler = event => {\n    setEnteredUsername(event.target.value);\n  };\n  //set to what the user currently entered--> with help of event object; target event is the input and value property of that input to get the currently entered value\n\n  const ageChangeHandler = event => {\n    setEnteredAge(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.input,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: AddUserHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"username\",\n        children: \"Username\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"username\",\n        type: \"text\",\n        value: enteredUsername,\n        onChange: usernameChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"age\",\n        children: \"Age (Years)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"age\",\n        type: \"number\",\n        value: enteredAge,\n        onChange: ageChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        children: \"Add User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n//add in id for accessibility\n//htmlFor is the prop name for assigning the 'for' attribute to a label\n//onSubmit prop to specify a function that should be executed when the form is submitted\n//bind usernameChangeHandler to onChange prop which ties the change event listener; function will be triggered for every keystroke in the input element\n_s(AddUser, \"KlB6dcQFtu+2S16p6cjD6Kz8DMs=\");\n_c = AddUser;\nexport default AddUser;\nvar _c;\n$RefreshReg$(_c, \"AddUser\");","map":{"version":3,"names":["React","useState","Card","Button","classes","jsxDEV","_jsxDEV","AddUser","props","_s","enteredUsername","setEnteredUsername","enteredAge","setEnteredAge","AddUserHandler","event","preventDefault","trim","length","console","log","usernameChangeHandler","target","value","ageChangeHandler","className","input","children","onSubmit","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","type","onChange","_c","$RefreshReg$"],"sources":["/Users/HSamoenEban/Downloads/my-user-form-app/src/components/Users/AddUser.js"],"sourcesContent":["import React, { useState } from 'react';\n\nimport Card from '../UI/Card';\nimport Button from '../UI/Button';\nimport classes from './AddUser.module.css'\n//for nonjavascript files add extention -->.css\n\n\nconst AddUser = (props) => {\n    const [enteredUsername, setEnteredUsername] = useState('')\n    //inital state is set to an empty string--> no input\n    //[enteredUsername, setEnteredUsername] : a javascript syntax called array de-structuring and is used because useState() always returns an array with exactly two elements\n    const [enteredAge, setEnteredAge] = useState('')\n    \n    const AddUserHandler = (event) => {\n        event.preventDefault();\n        if (enteredUsername.trim().length === 0 || enteredAge.trim().length === 0) {\n            return;\n        }\n        if (+enteredAge < 1) {\n            return; \n        }\n        //adding validation:\n        //nothing is logged if one input is empty and age cannot be less than 1 \n        //+ --> returns a number instead of a string\n        console.log(enteredUsername, enteredAge)\n        setEnteredUsername('');\n        setEnteredAge('');\n    };\n//event.preventDefault() --> prevent default which for the submission event is that a request is sent\n//setEnteredUsername/setEnteredAge to empty strings --->clear input area once button is clicked\n\n        const usernameChangeHandler = (event) => {\n            setEnteredUsername(event.target.value)\n        };\n        //set to what the user currently entered--> with help of event object; target event is the input and value property of that input to get the currently entered value\n\n        const ageChangeHandler = (event) => {\n            setEnteredAge(event.target.value)\n        };\n    return (\n        <Card className={classes.input}>\n            <form onSubmit={AddUserHandler}>\n            <label htmlFor=\"username\">Username</label>\n            <input id=\"username\" type=\"text\" value={enteredUsername} onChange={usernameChangeHandler}></input>\n            <label htmlFor=\"age\">Age (Years)</label>\n            <input id=\"age\" type=\"number\" value={enteredAge} onChange={ageChangeHandler}></input>\n            <Button type=\"submit\">Add User</Button>\n        </form>\n        </Card>\n    )\n}\n//add in id for accessibility\n//htmlFor is the prop name for assigning the 'for' attribute to a label\n//onSubmit prop to specify a function that should be executed when the form is submitted\n//bind usernameChangeHandler to onChange prop which ties the change event listener; function will be triggered for every keystroke in the input element\n\nexport default AddUser;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAEvC,OAAOC,IAAI,MAAM,YAAY;AAC7B,OAAOC,MAAM,MAAM,cAAc;AACjC,OAAOC,OAAO,MAAM,sBAAsB;AAC1C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGA,MAAMC,OAAO,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACvB,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC1D;EACA;EACA,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAMa,cAAc,GAAIC,KAAK,IAAK;IAC9BA,KAAK,CAACC,cAAc,EAAE;IACtB,IAAIN,eAAe,CAACO,IAAI,EAAE,CAACC,MAAM,KAAK,CAAC,IAAIN,UAAU,CAACK,IAAI,EAAE,CAACC,MAAM,KAAK,CAAC,EAAE;MACvE;IACJ;IACA,IAAI,CAACN,UAAU,GAAG,CAAC,EAAE;MACjB;IACJ;IACA;IACA;IACA;IACAO,OAAO,CAACC,GAAG,CAACV,eAAe,EAAEE,UAAU,CAAC;IACxCD,kBAAkB,CAAC,EAAE,CAAC;IACtBE,aAAa,CAAC,EAAE,CAAC;EACrB,CAAC;EACL;EACA;;EAEQ,MAAMQ,qBAAqB,GAAIN,KAAK,IAAK;IACrCJ,kBAAkB,CAACI,KAAK,CAACO,MAAM,CAACC,KAAK,CAAC;EAC1C,CAAC;EACD;;EAEA,MAAMC,gBAAgB,GAAIT,KAAK,IAAK;IAChCF,aAAa,CAACE,KAAK,CAACO,MAAM,CAACC,KAAK,CAAC;EACrC,CAAC;EACL,oBACIjB,OAAA,CAACJ,IAAI;IAACuB,SAAS,EAAErB,OAAO,CAACsB,KAAM;IAAAC,QAAA,eAC3BrB,OAAA;MAAMsB,QAAQ,EAAEd,cAAe;MAAAa,QAAA,gBAC/BrB,OAAA;QAAOuB,OAAO,EAAC,UAAU;QAAAF,QAAA,EAAC;MAAQ;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAQ,eAC1C3B,OAAA;QAAO4B,EAAE,EAAC,UAAU;QAACC,IAAI,EAAC,MAAM;QAACZ,KAAK,EAAEb,eAAgB;QAAC0B,QAAQ,EAAEf;MAAsB;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS,eAClG3B,OAAA;QAAOuB,OAAO,EAAC,KAAK;QAAAF,QAAA,EAAC;MAAW;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAQ,eACxC3B,OAAA;QAAO4B,EAAE,EAAC,KAAK;QAACC,IAAI,EAAC,QAAQ;QAACZ,KAAK,EAAEX,UAAW;QAACwB,QAAQ,EAAEZ;MAAiB;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS,eACrF3B,OAAA,CAACH,MAAM;QAACgC,IAAI,EAAC,QAAQ;QAAAR,QAAA,EAAC;MAAQ;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACpC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACA;AAEf,CAAC;AACD;AACA;AACA;AACA;AAAAxB,EAAA,CA/CMF,OAAO;AAAA8B,EAAA,GAAP9B,OAAO;AAiDb,eAAeA,OAAO;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}